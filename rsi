import ccxt
import pandas as pd
import matplotlib.pyplot as plt
from io import BytesIO
import asyncio
import nest_asyncio
from telegram import Bot
import config  # Import the config module
import ta  # Import ta library

interval = '1d'  # 1-day candlesticks

# Initialize Binance client
binance = ccxt.binance({
    'apiKey': config.API_KEY,
    'secret': config.API_SECRET,
})

# Dictionary to store the last alert messages for each symbol
last_alert_messages = {}

# Function to get historical candlestick data
def get_historical_data(symbol, interval, limit=100):
    ohlcv = binance.fetch_ohlcv(symbol, interval, limit=limit)
    df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
    df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
    df.set_index('timestamp', inplace=True)
    return df

# Function to calculate VWMA
def calculate_vwma(df, period):
    return (df['close'] * df['volume']).rolling(window=period).sum() / df['volume'].rolling(window=period).sum()

# Function to calculate RSI using ta library
def calculate_rsi(df, period=6):
    return ta.momentum.RSIIndicator(df['close'], window=period).rsi()

# Function to calculate Stochastic RSI
def calculate_stochrsi(df, period=14, smooth_k=3, smooth_d=3):
    stoch_rsi = ta.momentum.StochasticOscillator(df['high'], df['low'], df['close'], window=period)
    df['stochrsi'] = stoch_rsi.stoch()
    df['stochrsi_k'] = df['stochrsi'].rolling(window=smooth_k).mean()
    df['stochrsi_d'] = df['stochrsi_k'].rolling(window=smooth_d).mean()
    return df


# Function to check RSI cross
def check_rsi_cross(df):
    df['rsi_14'] = calculate_rsi(df, period=6)
    df['rsi_200'] = calculate_rsi(df, period=21)

    # Detect cross over and cross under
    cross_over = df['rsi_14'].iloc[-3] < df['rsi_200'].iloc[-3] and df['rsi_14'].iloc[-2] > df['rsi_200'].iloc[-2]
    cross_under = df['rsi_14'].iloc[-3] > df['rsi_200'].iloc[-3] and df['rsi_14'].iloc[-2] < df['rsi_200'].iloc[-2]

    return cross_over, cross_under

# Function to check VWMA cross
def check_vwma_cross(df, short_period=5, long_period=10):
    df['vwma_short'] = calculate_vwma(df, short_period)
    df['vwma_long'] = calculate_vwma(df, long_period)

    cross_over = df['vwma_short'].iloc[-2] > df['vwma_long'].iloc[-2] and df['vwma_short'].iloc[-3] < df['vwma_long'].iloc[-3]
    cross_under = df['vwma_short'].iloc[-2] < df['vwma_long'].iloc[-2] and df['vwma_short'].iloc[-3] > df['vwma_long'].iloc[-3]

    return cross_over, cross_under

# Function to plot VWMA, RSI, and Stochastic RSI chart and return image buffer
def plot_chart(df, symbol, title):
    # Calculate RSI
    df['rsi_14'] = calculate_rsi(df, period=6)
    df['rsi_200'] = calculate_rsi(df, period=21)

    # Calculate Stochastic RSI
    df = calculate_stochrsi(df, period=14)

    fig, (ax1, ax2, ax3) = plt.subplots(3, 1, figsize=(12, 15), gridspec_kw={'height_ratios': [3, 1, 1]})

    # Plotting the VWMA and price chart
    ax1.plot(df.index, df['close'], label='Close Price', color='black')
    ax1.plot(df.index, df['vwma_short'], label='Short-term VWMA', linestyle='-', color='red')
    ax1.plot(df.index, df['vwma_long'], label='Long-term VWMA', linestyle='-', color='purple')
    ax1.set_xlabel('Timestamp')
    ax1.set_ylabel('Price')
    ax1.set_title(title)
    ax1.legend()

    # Plotting the RSI
    ax2.plot(df.index, df['rsi_14'], label='RSI (6)', color='blue')
    ax2.plot(df.index, df['rsi_200'], label='RSI (21)', color='green')
    ax2.set_xlabel('Timestamp')
    ax2.set_ylabel('RSI')
    ax2.axhline(30, linestyle='-', color='red')  # Oversold line
    ax2.axhline(70, linestyle='-', color='green')  # Overbought line
    ax2.legend()

    # Plotting the Stochastic RSI
    ax3.plot(df.index, df['stochrsi_k'], label='Stochastic RSI %K', color='blue')
    ax3.plot(df.index, df['stochrsi_d'], label='Stochastic RSI %D', color='red')
    ax3.set_xlabel('Timestamp')
    ax3.set_ylabel('Stochastic RSI')
    ax3.axhline(0.2, linestyle='-', color='green')  # Oversold line
    ax3.axhline(0.8, linestyle='-', color='red')  # Overbought line
    ax3.legend()

    plt.tight_layout()

    # Save plot to a BytesIO object
    buf = BytesIO()
    plt.savefig(buf, format='png')
    buf.seek(0)
    plt.close()
    return buf

# Function to send Telegram message and image (now defined as async)
async def send_telegram_message(symbol, message, image_buffer):
    # Check if the current message is the same as the previous one for this symbol
    if last_alert_messages.get(symbol) != message:
        await telegram_bot.send_message(chat_id=config.CHAT_ID, text=message)
        # Send image
        await telegram_bot.send_photo(chat_id=config.CHAT_ID, photo=image_buffer)
        # Update the last alert message for this symbol
        last_alert_messages[symbol] = message

# Main function (now defined as async)
async def main():
    while True:
        for symbol in config.SELECTED_SYMBOLS:
            try:
                historical_data = get_historical_data(symbol, interval)
                
                # Calculate VWMA crosses
                vwma_cross_over, vwma_cross_under = check_vwma_cross(historical_data)
                
                # Calculate RSI crosses
                rsi_cross_over, rsi_cross_under = check_rsi_cross(historical_data)

                # Create messages based on crosses
                if rsi_cross_over:
                    message = f'RSI 6 #crossed_above RSI 21 on #{symbol}'
                    title = f'RSI Cross Over for {symbol}'
                elif rsi_cross_under:
                    message = f'RSI 6 #crossed_below RSI 21 on #{symbol}'
                    title = f'RSI Cross Under for {symbol}'
                elif vwma_cross_over:
                    message = f'VWMA #cross_over detected on #{symbol}'
                    title = f'VWMA Cross Over for {symbol}'
                elif vwma_cross_under:
                    message = f'VWMA #cross_under detected on #{symbol}'
                    title = f'VWMA Cross Under for {symbol}'
                else:
                    message = None
                
                # Plot and send alerts if there are messages
                if message:
                    # Plot and get image buffer
                    image_buffer = plot_chart(historical_data, symbol, title)
                    await send_telegram_message(symbol, message, image_buffer)

            except Exception as e:
                print(f"Error processing {symbol}: {e}")

        # Sleep for a specified interval before checking again
        await asyncio.sleep(86400)  # Adjust the sleep duration as needed

# Initialize Telegram Bot
telegram_bot = Bot(token=config.TELEGRAM_TOKEN)

# Use nest_asyncio to allow running asyncio in Jupyter notebooks
nest_asyncio.apply()

# Create and run the event loop
asyncio.run(main())
